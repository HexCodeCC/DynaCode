-- NOTE: This file uses the 'dir, del, rmdir and mkdir' commands along with windows IF conditions. This may not be available on your OS and is therefor marked windows only.

local start = os.clock()
print("Starting build\nClearing build location")

local popen = io.popen

os.execute("IF EXIST minified ( rmdir minified /S /Q )")
os.execute("mkdir minified")

local function explore( src, _file )
    local file = _file or {}

    print("Exploring '"..src.."'")

    for filename in popen("dir /b /a-d "..src):lines() do
        print("Found file '"..filename.."' in '"..src.."'")
        file[ #file + 1 ] = src.."\\"..filename
    end

    for dirname in popen("dir /b /ad "..src):lines() do
        print("Found directory '"..dirname.."' in '"..src.."'")
        explore( src .. "\\" .. dirname, file )
    end

    return file
end

local function makeDirsRequired( path )
    local last = "minified"
    for dirname in string.gmatch( path, "(.-)\\") do
        last = last .. "\\" .. dirname
        os.execute("IF NOT EXIST "..last.." ( mkdir "..last.." )")
    end
end

local minificationClient
local function minify( path )
    makeDirsRequired( path )
    minificationClient( ".build_temp", "--quiet", "-o", "minified\\"..path )
end

print("Initialising minification client")
minificationClient = assert( loadfile("LuaSrcDiet.lua"), "Failed to load file 'LuaSrcDiet.lua' to perform minification")
print("Minification client loaded")

local function getFileContent( path )
    local h = io.open( path, "rb" )
    local content = h:read("*all")
    h:close()

    return content
end

local function preProcess( data )
    local name = string.match( data, "abstract class (\"%w*\")")
    if name then
        data = string.gsub( data, "abstract class "..name, "class "..name.." abstract()")
    end
    return data
end

local files = explore( "src" )

if #files == 0 then error("No files found", 0) end

-- Minify each file and save them
for i = 1, #files do
    local file = files[i]
    if not string.find(file, ".cfg") then
        print("Attempting minification of '"..file.."'")
        -- create temp file and pre-process the file (incase its using invalid syntax for class creation. eg: abstract)
        local h = io.open(file, "rb")
        local f = io.open(".build_temp", "wb")

        f:write( preProcess( h:read("*all") ) )

        h:close()
        f:close()

        -- temp file saved, minify that file (the minify requires a path to a file, not raw data. because of this I pre process the file and save it to a temp location)

        minify( file )
    else
        print("Configuration file found '"..file.."'. Saving as raw")
        makeDirsRequired( file )

        local f = assert( io.open( file, "rb" ), "Failed to open configuration file '"..tostring( file ).."'")

        local h = assert( io.open( "minified\\"..file, "wb" ), "Failed to open stream to write file 'minified\\"..tostring( file ).."'")

        h:write( f:read("*all" ) )

        f:close()
        h:close()
    end
end

print("Removing temporary files")
os.execute("IF EXIST .build_temp (del .build_temp)")

print("Minification completed (took " .. ( os.difftime( os.clock(), start ) ) .. "s)")
print("Complete build on ComputerCraft. (The files now need to be serialised using textutils)")
