local tWidth, tHeight = term.getSize()
local logging = true


local function drawCentre( text, y, colour )
    if colour then term.setTextColour( colour ) end
    if text:len() <= tWidth then
        term.setCursorPos( math.ceil( (tWidth / 2) - ( text:len() / 2 ) ), y )
    else
        term.setCursorPos( 1, y )
    end
    term.write( text )
end

shell.run("dobuild.lua", "/src", "bin/DynaCode.lua")
dofile("bin/DynaCode.lua")

--if true then dofile("example/example.lua") return end


if logging then
    if not log then error("DynaCode Logger not available.", 0) end

    log:setLoggingEnabled( true )
    log:setLoggingPath("DynaCode.log")
end


app = Application( term.getSize() )
app.backgroundColour = colors.cyan

stage = app + Stage({
    name = "TestStage";
    X = 5;
    Y = 5;
    width = 15;
    height = 8;
    textColour = colors.lightGray;
    titleTextColour = colors.white;
    titleBackgroundColour = 128;
    backgroundColour = colors.white;
    shadowColour = colors.gray;
    shadow = true;
    title = "Test Window";
    minHeight = 10;
})

stage2 = app + Stage({
    name = "TestStage2";
    X = 5;
    Y = 2;
    width = 25;
    height = 10;
    textColour = colors.lightGray;
    titleTextColour = colors.white;
    titleBackgroundColour = 128;
    backgroundColour = colors.white;
    shadowColour = colors.gray;
    shadow = true;
    title = "Another Window";
})

label = stage + Label("Hello World!", 3, 1)
input = stage + Input( 3, 2, 11, 1 )
button = stage + Button( "Hello world", 4, 3, 9, 4 )


app.hotkey:registerCombination("stop", "shift-ctrl-q", function()
    app:finish()
    print("Finished")
end)

app.hotkey:registerCombination("openLuaPrompt", "shift-ctrl-l", function()
    app:finish( function() shell.run("lua") end )
end)

app:registerDaemon( MyDaemon("application_example_daemon_service") )

function app:onRun()
    -- will be called _every_ time the application is executed.
    log("i", "Application starting")
end

local BLUE, GREY, LIGHT_GREY, WHITE = colours.blue, colours.grey, colours.lightGrey, 1
function app:errorHandler( err, daemon )
    log("f", "Fatal error caught: '"..err.."'. Daemon status: ".. ( daemon and "running" or "not running" ) )
    term.setBackgroundColour( 1 )
    term.clear()

    drawCentre( "DynaCode Crash Handler", 4, BLUE )
    drawCentre( "A fatal exception occured "..( daemon and "during runtime" or "during service start"), 5, GREY )

    drawCentre( "Please report this issue with the error", 8, LIGHT_GREY )
    drawCentre( "and steps to reproduce using the", 9 )
    drawCentre( "GitHub issue page", 10 )

    drawCentre( "Error: "..err, 12, colours.red )

    drawCentre("Press any key to shutdown", tHeight, GREY )

    if daemon then
        local ok, err = pcall( function() self:stopDaemons( false ) end )
        if err or not ok then
            drawCentre( "Daemon Status: Failed to stop", 14, colours.red )
            log("f", "Failed to stop daemon service in crash handler. Reason: "..err)
        elseif ok then
            drawCentre( "Daemon Status: Stopped", 14, colours.green)
        end
    else drawCentre( "Daemon Status: Failed to start (stopped)", 14, colours.orange ) end

    if logging and type( log ) == "table" and type( log.getEnabled ) == "function" and log:getEnabled() then
        drawCentre("See log for full error details", tHeight-2, GREY)
    else
        drawCentre("Enable log to get further error details", tHeight-2, GREY)
    end

    while true do
        local e = { coroutine.yield() }
        if e[1] == "key" then os.shutdown() break end
    end
end


panel = stage2 + Panel( 2, 2, 20, 10 )
panel.backgroundColour = colours.red

button2 = panel + Button("Hello Again", 2, 3, 30, 5)
app:requestStageFocus( stage2 ) -- The event eating issue is fixed so this can be here now.

app:appendStagesFromDCML( "stages.dcml" )
app:run()
